name: Dev - Deploy to AKS (after CI)

on:
  # Auto-run after CI on testing finishes
  workflow_run:
    workflows: ["CI - Test, Build & Push (testing)"]
    types: [completed]
  # Also allow a manual Run button
  workflow_dispatch: {}

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME: ${{ secrets.ACR_NAME }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  AKS_RG: ${{ secrets.AKS_RG }}
  AKS_CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  DEV_NAMESPACE: dev

jobs:
  deploy_dev:
    # Run after a successful CI or when manually dispatched
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_CLUSTER_NAME }}

      - name: Ensure dev namespace
        run: kubectl create namespace "${{ env.DEV_NAMESPACE }}" --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update ACR pull secret (dev)
        run: |
          kubectl create secret docker-registry acr-pull \
            --namespace "${{ env.DEV_NAMESPACE }}" \
            --docker-server="${{ env.ACR_LOGIN_SERVER }}" \
            --docker-username="$(az acr credential show -n ${{ env.ACR_NAME }} --query username -o tsv)" \
            --docker-password="$(az acr credential show -n ${{ env.ACR_NAME }} --query passwords[0].value -o tsv)" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Determine image tag
          run:
            echo "IMAGE_TAG=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV

      - name: Verify manifests present
        run: |
          test -d k8s/prod || { echo "k8s/prod not found in this ref. Ensure manifests are committed on the CI branch."; exit 1; }
          ls -la k8s/prod

      - name: Apply manifests to dev (with image vars)
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          for f in k8s/prod/*.yaml; do
            ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}" GITHUB_SHA="${IMAGE_TAG}" \
            envsubst < "$f" | kubectl apply -n "${{ env.DEV_NAMESPACE }}" -f -
          done

      - name: Wait for rollouts (dev)
        run: |
          set -e
          kubectl rollout status -n "${{ env.DEV_NAMESPACE }}" deployment/product_service --timeout=180s
          kubectl rollout status -n "${{ env.DEV_NAMESPACE }}" deployment/order_service --timeout=180s
          kubectl rollout status -n "${{ env.DEV_NAMESPACE }}" deployment/customer_service --timeout=180s
          kubectl rollout status -n "${{ env.DEV_NAMESPACE }}" deployment/frontend --timeout=240s

      - name: Show services (dev)
        run: kubectl get svc -n "${{ env.DEV_NAMESPACE }}"
