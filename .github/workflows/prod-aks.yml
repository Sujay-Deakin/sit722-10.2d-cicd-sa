name: Prod - Deploy to AKS (on main)

on:
  push:
    branches: ["main"]
  workflow_dispatch: {}

env:
  ACR_LOGIN_SERVER:   ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME:           ${{ secrets.ACR_NAME }}
  AZURE_CREDENTIALS:  ${{ secrets.AZURE_CREDENTIALS }}
  PROD_NAMESPACE:     prod

concurrency:
  group: prod-aks
  cancel-in-progress: false

jobs:
  deploy_prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (this main commit)
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RG }}
          cluster-name:   ${{ secrets.AKS_CLUSTER_NAME }}
          subscription:   ${{ secrets.AZ_SUBSCRIPTION_ID }}

      - name: Ensure prod namespace
        run: kubectl create namespace "${{ env.PROD_NAMESPACE }}" --dry-run=client -o yaml | kubectl apply -f -

      # Use SP creds (AcrPull on ACR) for the pull secret
      - name: Create/Update ACR pull secret (prod)
        env:
          SP_CLIENT_ID:     ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          SP_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl create secret docker-registry acr-pull \
            -n "${{ env.PROD_NAMESPACE }}" \
            --docker-server="${{ env.ACR_LOGIN_SERVER }}" \
            --docker-username="${SP_CLIENT_ID}" \
            --docker-password="${SP_CLIENT_SECRET}" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl patch serviceaccount default -n "${{ env.PROD_NAMESPACE }}" \
            -p '{"imagePullSecrets":[{"name":"acr-pull"}]}'

      # --- Wait for CI images to exist in ACR for this commit SHA ---
      - name: Wait for images in ACR (this commit SHA)
        run: |
          set -e
          TAG="${GITHUB_SHA}"
          echo "Waiting for images with tag ${TAG} in ACR '${{ env.ACR_NAME }}'..."
          for repo in product_service order_service customer_service frontend; do
            echo "Checking $repo:${TAG}"
            for i in $(seq 1 60); do
              if az acr repository show -n "${{ env.ACR_NAME }}" --image "$repo:${TAG}" >/dev/null 2>&1; then
                echo "Found $repo:${TAG}"; break
              fi
              sleep 10
              if [ $i -eq 60 ]; then echo "Image $repo:${TAG} not found in time"; exit 1; fi
            done
          done

      - name: Apply manifests to prod
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          for f in k8s/prod/*.y*ml; do
            ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}" GITHUB_SHA="${GITHUB_SHA}" \
            envsubst < "$f" | kubectl apply -n "${{ env.PROD_NAMESPACE }}" -f -
          done
          kubectl get deploy,svc -n "${{ env.PROD_NAMESPACE }}"

      - name: Wait for rollouts (prod)
        run: |
          set -e
          for d in product-service order-service customer-service frontend; do
            kubectl rollout status -n "${{ env.PROD_NAMESPACE }}" deployment/$d --timeout=300s
          done

      - name: Show external access (frontend)
        run: kubectl get svc frontend -n "${{ env.PROD_NAMESPACE }}" -o wide
