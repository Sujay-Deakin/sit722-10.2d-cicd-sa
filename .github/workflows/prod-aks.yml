name: Prod - Deploy to AKS (after CI on main)

on:
  workflow_run:
    workflows: ["CI - Test, Build & Push (testing)"]  # must match CI name
    types: [completed]
    branches: [main]                                  # only when CI runs on main
  workflow_dispatch: {}

env:
  ACR_LOGIN_SERVER:   ${{ secrets.ACR_LOGIN_SERVER }}
  ACR_NAME:           ${{ secrets.ACR_NAME }}
  AZURE_CREDENTIALS:  ${{ secrets.AZURE_CREDENTIALS }}
  PROD_NAMESPACE:     prod

concurrency:
  group: prod-aks
  cancel-in-progress: false

jobs:
  deploy_prod:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (CI commit for workflow_run, or main for manual)
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && 'main' || github.event.workflow_run.head_sha }}

      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set AKS context
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ secrets.AKS_RG }}
          cluster-name:   ${{ secrets.AKS_CLUSTER_NAME }}
          subscription:   ${{ secrets.AZ_SUBSCRIPTION_ID }}

      - name: Ensure prod namespace
        run: kubectl create namespace "${{ env.PROD_NAMESPACE }}" --dry-run=client -o yaml | kubectl apply -f -

      # Use SP creds + AcrPull role (no ACR admin)
      - name: Create/Update ACR pull secret (prod)
        env:
          SP_CLIENT_ID:     ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientId }}
          SP_CLIENT_SECRET: ${{ fromJSON(secrets.AZURE_CREDENTIALS).clientSecret }}
        run: |
          kubectl create secret docker-registry acr-pull \
            -n "${{ env.PROD_NAMESPACE }}" \
            --docker-server="${{ env.ACR_LOGIN_SERVER }}" \
            --docker-username="${SP_CLIENT_ID}" \
            --docker-password="${SP_CLIENT_SECRET}" \
            --dry-run=client -o yaml | kubectl apply -f -
          kubectl patch serviceaccount default -n "${{ env.PROD_NAMESPACE }}" \
            -p '{"imagePullSecrets":[{"name":"acr-pull"}]}'

      - name: Set image tag (deploy this CI commit)
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV
          else
            echo "IMAGE_TAG=${{ github.event.workflow_run.head_sha }}" >> $GITHUB_ENV
          fi

      - name: Apply manifests to prod
        run: |
          sudo apt-get update && sudo apt-get install -y gettext-base
          for f in k8s/prod/*.y*ml; do
            ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}" GITHUB_SHA="${IMAGE_TAG}" \
            envsubst < "$f" | kubectl apply -n "${{ env.PROD_NAMESPACE }}" -f -
          done
          kubectl get deploy,svc -n "${{ env.PROD_NAMESPACE }}"

      - name: Wait for rollouts (prod)
        run: |
          set -e
          for d in product-service order-service customer-service frontend; do
            kubectl rollout status -n "${{ env.PROD_NAMESPACE }}" deployment/$d --timeout=300s
          done

      - name: Show external access (frontend)
        run: kubectl get svc frontend -n "${{ env.PROD_NAMESPACE }}" -o wide
