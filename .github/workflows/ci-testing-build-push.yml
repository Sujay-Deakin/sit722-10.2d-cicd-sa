name: CI - Test, Build & Push (testing)

on:
  push:
    branches: ["testing", "main"]

env:
  ACR_NAME: ${{ secrets.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

jobs:
  test_build_push:
    runs-on: ubuntu-latest

    # Start Postgres for tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip & base test deps
        run: |
          python -V
          python -m pip install --upgrade pip
          pip install pytest httpx pytest-cov

      - name: Install psql client & wait for Postgres
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          for i in {1..30}; do
            if pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              echo "Postgres is up"; break
            fi
            echo "Waiting for Postgresâ€¦ ($i/30)"; sleep 2
          done

      # ---------- Tests ----------
      - name: Test product_service
        working-directory: ./backend/product_service
        env:
          PYTHONPATH: ${{ github.workspace }}/backend/product_service
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: products
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/products
        run: |
          pip install --no-cache-dir -r requirements.txt
          pytest -vv -ra

      - name: Test order_service
        working-directory: ./backend/order_service
        env:
          PYTHONPATH: ${{ github.workspace }}/backend/order_service
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: products
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/products
        run: |
          pip install --no-cache-dir -r requirements.txt
          pytest -vv -ra || echo "no tests found for order_service"

      - name: Test customer_service
        working-directory: ./backend/customer_service
        env:
          PYTHONPATH: ${{ github.workspace }}/backend/customer_service
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_NAME: products
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/products
        run: |
          pip install --no-cache-dir -r requirements.txt
          pytest -vv -ra || echo "no tests found for customer_service"

      # ---------- Build & push (only runs if product_service tests passed) ----------
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login (Docker)
        run: az acr login --name "${{ env.ACR_NAME }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push product_service
        run: |
          REG=${{ env.ACR_LOGIN_SERVER }}
          docker buildx build --platform linux/amd64 \
            -t $REG/product_service:${GITHUB_SHA} \
            -f backend/product_service/Dockerfile \
            --push .

      - name: Build & Push order_service
        run: |
          REG=${{ env.ACR_LOGIN_SERVER }}
          docker buildx build --platform linux/amd64 \
            -t $REG/order_service:${GITHUB_SHA} \
            -f backend/order_service/Dockerfile \
            --push .

      - name: Build & Push customer_service
        run: |
          REG=${{ env.ACR_LOGIN_SERVER }}
          docker buildx build --platform linux/amd64 \
            -t $REG/customer_service:${GITHUB_SHA} \
            -f backend/customer_service/Dockerfile \
            --push .

      - name: Build & Push frontend
        run: |
          REG=${{ env.ACR_LOGIN_SERVER }}
          docker buildx build --platform linux/amd64 \
            -t $REG/frontend:${GITHUB_SHA} \
            -f frontend/Dockerfile \
            --push .
